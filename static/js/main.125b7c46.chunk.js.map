{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Title","Typography","walletsInLocalStorage","encryptedKey","address","WalletModal","_ref","onClose","handleResult","react_default","a","createElement","modal","title","footer","visible","onCancel","cancelText","dist_default","savedWallets","onConnected","wallet","App","_useState","useState","_useState2","Object","slicedToArray","showModal","setShowModal","_useState3","_useState4","result","setResult","className","typography","style","maxWidth","fontSize","JSON","stringify","es_button","onClick","type","App_WalletModal","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yXAIQA,iBAAUC,IAAVD,OAkCR,IAAME,EAAwB,CAC5B,CACEC,aAAc,6DACdC,QAAS,sCAEX,CACED,aAAc,6DACdC,QAAS,uCAIPC,EAAc,SAAAC,GAA+B,IAA5BC,EAA4BD,EAA5BC,QAASC,EAAmBF,EAAnBE,aAC9B,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,MAAM,cACNC,OAAQ,KACRC,SAAS,EACTC,SAAUT,EACVU,WAAW,SAEXR,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CACES,aAAcjB,EACdkB,YAAa,SAAAC,GAAM,OAAIb,EAAaa,QAM7BC,EA1Df,WAAe,IAAAC,EACqBC,oBAAS,GAD9BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACKI,EADLJ,EAAA,GAAAK,EAEeN,mBAAS,MAFxBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENE,EAFMD,EAAA,GAEEE,EAFFF,EAAA,GAGb,OACEtB,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,OACbzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,KACE1B,EAAAC,EAAAC,cAACX,EAAD,2BAEDgC,EACCvB,EAAAC,EAAAC,cAAA,OAAKyB,MAAO,CAAEC,SAAU,QAASC,SAAU,SACxCC,KAAKC,UAAUR,EAAQ,KAAM,IAE9B,KAEJvB,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAQC,QAAS,kBAAMb,GAAa,IAAOc,KAAK,WAAhD,eAGCf,EACCnB,EAAAC,EAAAC,cAACiC,EAAD,CACEpC,aAAc,SAAAa,GACZQ,GAAa,GACbI,EAAUZ,IAEZd,QAAS,kBAAMsB,GAAa,MAE5B,OCrBUgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.125b7c46.chunk.js","sourcesContent":["/* eslint-disable import/first */\nimport React, { useState } from \"react\";\nimport ReactNeoWallets from \"react-neo-wallets\";\nimport { Button, Modal, Typography } from \"antd\";\nconst { Title } = Typography;\nimport \"./App.css\";\nimport \"antd/dist/antd.css\";\n\nfunction App() {\n  const [showModal, setShowModal] = useState(false);\n  const [result, setResult] = useState(null);\n  return (\n    <div className=\"App\">\n      <Typography>\n        <Title>React Neo Wallets</Title>\n      </Typography>\n      {result ? (\n        <pre style={{ maxWidth: \"300px\", fontSize: \"12px\" }}>\n          {JSON.stringify(result, null, 1)}\n        </pre>\n      ) : null}\n\n      <Button onClick={() => setShowModal(true)} type=\"primary\">\n        Open wallet\n      </Button>\n      {showModal ? (\n        <WalletModal\n          handleResult={wallet => {\n            setShowModal(false);\n            setResult(wallet);\n          }}\n          onClose={() => setShowModal(false)}\n        />\n      ) : null}\n    </div>\n  );\n}\n\nconst walletsInLocalStorage = [\n  {\n    encryptedKey: \"6PYRj8SFUkDXm8vBunXkvVGAAan6HF3iDfKT4wcQMkpGkDHsVG8cbD9eSi\",\n    address: \"AVKEWZxPog7j5gqfMoLhgox9HK44tWUG2J\"\n  },\n  {\n    encryptedKey: \"6PYPUoZGMsGjWuqxekVcXrpzMdtks7VTSUZDoEpHLitjB2AnpWeLbpk2Dp\",\n    address: \"AeRhK6NDmGiNTz8yAAJe3o4ecaqztFL12B\"\n  }\n];\n\nconst WalletModal = ({ onClose, handleResult }) => {\n  return (\n    <Modal\n      title=\"NEO wallets\"\n      footer={null}\n      visible={true}\n      onCancel={onClose}\n      cancelText=\"Close\"\n    >\n      <ReactNeoWallets\n        savedWallets={walletsInLocalStorage}\n        onConnected={wallet => handleResult(wallet)}\n      />\n    </Modal>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}